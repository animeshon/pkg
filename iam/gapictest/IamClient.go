// Code generated by mockery v1.1.2. DO NOT EDIT.

package gapictest

import (
	context "context"

	admin "github.com/animeapis/go-genproto/iam/admin/v1alpha1"

	gapic "github.com/animeshon/pkg/iam/gapic"

	gax "github.com/googleapis/gax-go/v2"

	mock "github.com/stretchr/testify/mock"
)

// IamClient is an autogenerated mock type for the IamClient type
type IamClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *IamClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePermission provides a mock function with given fields: _a0, _a1, _a2
func (_m *IamClient) CreatePermission(_a0 context.Context, _a1 *admin.CreatePermissionRequest, _a2 ...gax.CallOption) (*admin.Permission, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *admin.Permission
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreatePermissionRequest, ...gax.CallOption) *admin.Permission); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Permission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.CreatePermissionRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRole provides a mock function with given fields: _a0, _a1, _a2
func (_m *IamClient) CreateRole(_a0 context.Context, _a1 *admin.CreateRoleRequest, _a2 ...gax.CallOption) (*admin.Role, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *admin.Role
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateRoleRequest, ...gax.CallOption) *admin.Role); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.CreateRoleRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermission provides a mock function with given fields: _a0, _a1, _a2
func (_m *IamClient) DeletePermission(_a0 context.Context, _a1 *admin.DeletePermissionRequest, _a2 ...gax.CallOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeletePermissionRequest, ...gax.CallOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRole provides a mock function with given fields: _a0, _a1, _a2
func (_m *IamClient) DeleteRole(_a0 context.Context, _a1 *admin.DeleteRoleRequest, _a2 ...gax.CallOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteRoleRequest, ...gax.CallOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPermission provides a mock function with given fields: _a0, _a1, _a2
func (_m *IamClient) GetPermission(_a0 context.Context, _a1 *admin.GetPermissionRequest, _a2 ...gax.CallOption) (*admin.Permission, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *admin.Permission
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetPermissionRequest, ...gax.CallOption) *admin.Permission); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Permission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetPermissionRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRole provides a mock function with given fields: _a0, _a1, _a2
func (_m *IamClient) GetRole(_a0 context.Context, _a1 *admin.GetRoleRequest, _a2 ...gax.CallOption) (*admin.Role, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *admin.Role
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetRoleRequest, ...gax.CallOption) *admin.Role); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetRoleRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPermissions provides a mock function with given fields: _a0, _a1, _a2
func (_m *IamClient) ListPermissions(_a0 context.Context, _a1 *admin.ListPermissionsRequest, _a2 ...gax.CallOption) gapic.PermissionIterator {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 gapic.PermissionIterator
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListPermissionsRequest, ...gax.CallOption) gapic.PermissionIterator); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gapic.PermissionIterator)
		}
	}

	return r0
}

// ListRoles provides a mock function with given fields: _a0, _a1, _a2
func (_m *IamClient) ListRoles(_a0 context.Context, _a1 *admin.ListRolesRequest, _a2 ...gax.CallOption) gapic.RoleIterator {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 gapic.RoleIterator
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListRolesRequest, ...gax.CallOption) gapic.RoleIterator); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gapic.RoleIterator)
		}
	}

	return r0
}

// UpdatePermission provides a mock function with given fields: _a0, _a1, _a2
func (_m *IamClient) UpdatePermission(_a0 context.Context, _a1 *admin.UpdatePermissionRequest, _a2 ...gax.CallOption) (*admin.Permission, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *admin.Permission
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdatePermissionRequest, ...gax.CallOption) *admin.Permission); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Permission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.UpdatePermissionRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRole provides a mock function with given fields: _a0, _a1, _a2
func (_m *IamClient) UpdateRole(_a0 context.Context, _a1 *admin.UpdateRoleRequest, _a2 ...gax.CallOption) (*admin.Role, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *admin.Role
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateRoleRequest, ...gax.CallOption) *admin.Role); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.UpdateRoleRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
