package protoerrors

import (
	"fmt"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/runtime/protoiface"
)

type Error struct {
	message string
	details []protoiface.MessageV1
	code    codes.Code
}

func (e *Error) Err() error {
	return e.Status().Err()
}

func (e *Error) Status() *status.Status {
	status := status.New(e.code, e.message)

	if len(e.details) == 0 {
		return status
	}

	status, err := status.WithDetails(e.details...)
	if err != nil {
		panic(err)
	}

	return status
}

// InvalidArgument indicates client specified an invalid argument.
// Note that this differs from FailedPrecondition. It indicates arguments
// that are problematic regardless of the state of the system
// (e.g., a malformed file name).
//
// This error code will not be generated by the gRPC framework.
func InvalidArgument(message string, args ...interface{}) *Error {
	return &Error{
		message: fmt.Sprintf(message, args...),
		code:    codes.InvalidArgument,
	}
}

// NotFound means some requested entity (e.g., file or directory) was
// not found.
//
// This error code will not be generated by the gRPC framework.
func NotFound(message string, args ...interface{}) *Error {
	return &Error{
		message: fmt.Sprintf(message, args...),
		code:    codes.NotFound,
	}
}

// AlreadyExists means an attempt to create an entity failed because one
// already exists.
//
// This error code will not be generated by the gRPC framework.
func AlreadyExists(message string, args ...interface{}) *Error {
	return &Error{
		message: fmt.Sprintf(message, args...),
		code:    codes.AlreadyExists,
	}
}

// PermissionDenied indicates the caller does not have permission to
// execute the specified operation. It must not be used for rejections
// caused by exhausting some resource (use ResourceExhausted
// instead for those errors). It must not be
// used if the caller cannot be identified (use Unauthenticated
// instead for those errors).
//
// This error code will not be generated by the gRPC core framework,
// but expect authentication middleware to use it.
func PermissionDenied(message string, args ...interface{}) *Error {
	return &Error{
		message: fmt.Sprintf(message, args...),
		code:    codes.PermissionDenied,
	}
}

// ResourceExhausted indicates some resource has been exhausted, perhaps
// a per-user quota, or perhaps the entire file system is out of space.
//
// This error code will be generated by the gRPC framework in
// out-of-memory and server overload situations, or when a message is
// larger than the configured maximum size.
func ResourceExhausted(message string, args ...interface{}) *Error {
	return &Error{
		message: fmt.Sprintf(message, args...),
		code:    codes.ResourceExhausted,
	}
}

// FailedPrecondition indicates operation was rejected because the
// system is not in a state required for the operation's execution.
// For example, directory to be deleted may be non-empty, an rmdir
// operation is applied to a non-directory, etc.
//
// A litmus test that may help a service implementor in deciding
// between FailedPrecondition, Aborted, and Unavailable:
//  (a) Use Unavailable if the client can retry just the failing call.
//  (b) Use Aborted if the client should retry at a higher-level
//      (e.g., restarting a read-modify-write sequence).
//  (c) Use FailedPrecondition if the client should not retry until
//      the system state has been explicitly fixed. E.g., if an "rmdir"
//      fails because the directory is non-empty, FailedPrecondition
//      should be returned since the client should not retry unless
//      they have first fixed up the directory by deleting files from it.
//  (d) Use FailedPrecondition if the client performs conditional
//      REST Get/Update/Delete on a resource and the resource on the
//      server does not match the condition. E.g., conflicting
//      read-modify-write on the same resource.
//
// This error code will not be generated by the gRPC framework.
func FailedPrecondition(message string, args ...interface{}) *Error {
	return &Error{
		message: fmt.Sprintf(message, args...),
		code:    codes.FailedPrecondition,
	}
}

// Aborted indicates the operation was aborted, typically due to a
// concurrency issue like sequencer check failures, transaction aborts,
// etc.
//
// See litmus test above for deciding between FailedPrecondition,
// Aborted, and Unavailable.
//
// This error code will not be generated by the gRPC framework.
func Aborted(message string, args ...interface{}) *Error {
	return &Error{
		message: fmt.Sprintf(message, args...),
		code:    codes.Aborted,
	}
}

// OutOfRange means operation was attempted past the valid range.
// E.g., seeking or reading past end of file.
//
// Unlike InvalidArgument, this error indicates a problem that may
// be fixed if the system state changes. For example, a 32-bit file
// system will generate InvalidArgument if asked to read at an
// offset that is not in the range [0,2^32-1], but it will generate
// OutOfRange if asked to read from an offset past the current
// file size.
//
// There is a fair bit of overlap between FailedPrecondition and
// OutOfRange. We recommend using OutOfRange (the more specific
// error) when it applies so that callers who are iterating through
// a space can easily look for an OutOfRange error to detect when
// they are done.
//
// This error code will not be generated by the gRPC framework.
func OutOfRange(message string, args ...interface{}) *Error {
	return &Error{
		message: fmt.Sprintf(message, args...),
		code:    codes.OutOfRange,
	}
}

// Internal errors. Means some invariants expected by underlying
// system has been broken. If you see one of these errors,
// something is very broken.
//
// This error code will be generated by the gRPC framework in several
// internal error conditions.
func Internal(message string, args ...interface{}) *Error {
	return &Error{
		message: fmt.Sprintf(message, args...),
		code:    codes.Internal,
	}
}

// Unauthenticated indicates the request does not have valid
// authentication credentials for the operation.
//
// The gRPC framework will generate this error code when the
// authentication metadata is invalid or a Credentials callback fails,
// but also expect authentication middleware to generate it.
func Unauthenticated(message string, args ...interface{}) *Error {
	return &Error{
		message: fmt.Sprintf(message, args...),
		code:    codes.Unauthenticated,
	}
}

var (
	DefaultUnauthenticated = Unauthenticated("The client must be authenticated to perform this request.")
	DefaultInternal        = Internal("An internal server error occurred, please try again later.")
)
